#!/usr/bin/env node

/**
 * NodeSend Server
 * by Mike Green <mike.is.green@gmail.com>
 */

'use strict';

var net      = require('net');
var path     = require('path');
var chalk    = require('chalk');
var through  = require('through2');
var temp     = require('temp').track();
var cp       = require('cp');
var humanize = require('humanize');
var pkg      = require(path.join(__dirname, '..', 'package.json'));

var argv = require('yargs')
  .usage('ns-receive server\n\nUsage: $0 [options]')
  .help('help').alias('help', 'h')
  .version(pkg.version, 'version').alias('version', 'v')
  .options({
    dir: {
      alias: 'd',
      description: 'Directory to store received files',
      requiresArg: true,
      default: process.cwd()
    },
    port: {
      alias: 'p',
      description: 'Port to listen on',
      requiresArg: true,
      default: 6666
    }
  }).argv;

var server = net.createServer(function(conn) {
  console.log('Received connection from ' + conn.remoteAddress);

  var newlineCount  = 0;
  var rawHeader     = '';
  var header        = {};
  var inBody        = false;
  var bytesReceived = 0;
  var tempStream    = temp.createWriteStream();
  var output        = path.join(argv.dir, 'output');

  var extractHeader = through(function _extractHeader(chunk, encoding, callback) {
    if (!inBody) {
      for (var i = 0; i < chunk.length; i++) {
        if (chunk[i] === 0x0a) {
          newlineCount++;

          if (newlineCount === 2) {
            inBody          = true;
            rawHeader       = chunk.slice(0, i - 1);
            var afterHeader = chunk.slice(i + 1);

            header = JSON.parse(rawHeader.toString());
            output = path.join(argv.dir, header.filename);

            bytesReceived += afterHeader.length;

            this.push(afterHeader);
          }
        }
      }
    } else {
      bytesReceived += chunk.length;
      this.push(chunk);
    }

    callback();
  });

  var finish = function _finish() {
    cp(tempStream.path, output, function() {
      console.log(chalk.green('Saved: ') + output);
      console.log(chalk.blue('Size: ') + humanize.filesize(bytesReceived - rawHeader.length));
    });
  };

  conn.on('end', finish).pipe(extractHeader).pipe(tempStream);
});

server.on('error', function(err) {
  console.log(chalk.red('Server Error'));
  console.log(err);
  server.close();
  process.exit();
});

server.listen(argv.port, function() {
  console.log(chalk.green('Started server on port ' + argv.port));
});
