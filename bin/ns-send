#!/usr/bin/env node

/**
 * NodeSend Client
 * by Mike Green <mike.is.green@gmail.com>
 */

'use strict';

var fs          = require('fs');
var net         = require('net');
var path        = require('path');
var chalk       = require('chalk');
var isEmpty     = require('lodash.isempty');
var ProgressBar = require('progress2');
var humanize    = require('humanize');
var progStream  = require('progress-stream');
var pkg         = require(path.join(__dirname, '..', 'package.json'));

var argv = require('yargs')
  .usage('ns-send client\n\nUsage: $0 --host=HOST [options] [file...]')
  .help('help').alias('help', 'h')
  .version(pkg.version, 'version').alias('version', 'v')
  .options({
    host: {
      alias: 'H',
      description: 'Host IP to connect to',
      requiresArg: true,
      required: true
    },
    port: {
      alias: 'p',
      description: 'Port to connect to',
      requiresArg: true,
      default: 6666
    },
    update: {
      alias: 'u',
      description: 'Progress update frequency',
      requiresArg: true,
      default: 500
    }
  }).argv;

var files;
var host   = argv.host;
var port   = argv.port;
var update = argv.update;

process.on('INT', function() { process.exit(); });

if (isEmpty(argv._)) {
  console.log(chalk.red('Feed me at least 1 file!'));
  process.exit(1);
}

files = argv._;

var sendFiles = function sendFiles() {
  var stats, humanSize, bar, file, client, header, progMon;
  var filename  = files.pop();
  var basename  = path.basename(filename);
  var bytesSent = 0;
  var progTitle = basename + ' [:bar] :percent (:speed / second)';
  var barWidth  = Math.min((process.stdout.columns - progTitle.length), 80);

  try {
    stats     = fs.statSync(filename);
    humanSize = humanize.filesize(stats.size);
  } catch (err) {
    console.log(chalk.red(chalk.bold('File not found: ')) + filename);
    return (files.length ? sendFiles() : null);
  }

  console.log(chalk.cyan('\nUploading ' + filename + ' (' + humanSize + ')'));

  header = {
    filename: basename,
    size: stats.size
  };

  bar = new ProgressBar(progTitle, {
    complete: '=',
    incomplete: '-',
    width: barWidth,
    total: stats.size
  });

  progMon = progStream({
    length: stats.size,
    time: update
  }, function(prog) {
    bytesSent += prog.delta;
    bar.tick(prog.delta, {
      speed: humanize.filesize(prog.speed)
    });
  });

  client = net.connect({
    host: host,
    port: port
  }, function() {
    client.write(JSON.stringify(header) + '\n\n');
    file = fs.createReadStream(filename);

    file.on('open', function() {
      file.pipe(progMon).pipe(client);
    });

    file.on('end', function() {
      if (files.length) {
        sendFiles();
      }
    });
  });
};

sendFiles();
