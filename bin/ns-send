#!/usr/bin/env node

/**
 * NodeSend Client
 * by Mike Green <mike.is.green@gmail.com>
 */

'use strict';

var fs          = require('fs');
var net         = require('net');
var path        = require('path');
var argv        = require('yargs').argv;
var chalk       = require('chalk');
var isEmpty     = require('lodash.isempty');
var ProgressBar = require('progress2');
var spy         = require('through2-spy');

var files;
var host = argv.host;
var port = argv.port;
//var concurrency = argv.concurrency || argv.j || 3;

process.on('INT', function() { process.exit(); });

if (argv.h) {
  console.log(chalk.bold('NodeSend Client'));
  console.log('Usage: client.js --host="xxx.xxx.xxx.xxx" --port=6666 [FILE...]');
  process.exit();
}

if (!host) {
  console.log(chalk.red('Please specify a host to connect to!'));
  process.exit(1);
}

if (!port) {
  port = 6666;
}

if (isEmpty(argv._)) {
  console.log(chalk.red('Feed me at least 1 file!'));
  process.exit(3);
}

files = argv._;

var sendFiles = function sendFiles() {
  var stats, bar, file, client, progressSpy, header;
  var filename  = files.pop();
  var basename  = path.basename(filename);
  var bytesSent = 0;
  var progTitle = basename + ' [:bar] :percent';
  var barWidth  = Math.min((process.stdout.columns - progTitle.length), 80);

  console.log(chalk.cyan('\nUploading ' + filename));

  try {
    stats = fs.statSync(filename);
  } catch (err) {
    console.log(chalk.red(chalk.bold('File not found: ')) + filename);
    return (files.length ? sendFiles() : null);
  }

  header = {
    filename: basename,
    size: stats.size
  };

  bar = new ProgressBar(progTitle, {
    complete: '=',
    incomplete: '-',
    width: barWidth,
    total: stats.size
  });

  progressSpy = spy(function(chunk) {
    bytesSent += chunk.length;
    bar.tick(chunk.length);
  });

  client = net.connect({
    host: host,
    port: port
  }, function() {
    client.write(JSON.stringify(header) + '\n\n');
    file = fs.createReadStream(filename);

    file.on('open', function() {
      file.pipe(progressSpy).pipe(client);
    });

    file.on('end', function() {
      if (files.length) {
        sendFiles();
      }
    });
  });
};

sendFiles();
